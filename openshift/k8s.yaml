---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stack-hub-index
  labels:
    app: stack-hub-index
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stack-hub-index
  template:
    metadata:
      labels:
        app: stack-hub-index
      annotations:
        date: "DATE"
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: stack-hub-index
      initContainers:
      - name: init
        image: NGINX_IMAGE
        command: ['/bin/sh']
        args:
          - -cex
          - |
            APISERVER=https://kubernetes.default.svc
            SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
            NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
            TOKEN=$(cat ${SERVICEACCOUNT}/token)
            CACERT=${SERVICEACCOUNT}/ca.crt
            for i in 1 2 3 4 5 6 7 8 9 10; do
              ROUTE=$(curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET -s \
                           ${APISERVER}/apis/route.openshift.io/v1/namespaces/$NAMESPACE/routes/stack-hub-index | jq -r .status.ingress[0].host)
              if [ -z "$ROUTE" ] || [ "$ROUTE" = "null" ]; then
                sleep 1
              else
                echo "http://$ROUTE" > /usr/share/stack-hub/route
                exit 0
              fi
            done
            echo "Unable to get route"
            exit 1
        volumeMounts:
        - name: shared-data
          mountPath: /usr/share/stack-hub
      containers:
      - name: nginx
        image: NGINX_IMAGE
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        command: ['/bin/sh']
        args:
          - -cex
          - |
            export EXTERNAL_URL=$(cat /usr/share/stack-hub/route)
            /opt/startup.sh
        volumeMounts:
        - name: shared-data
          mountPath: /usr/share/stack-hub
      volumes:
      - name: shared-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: stack-hub-index
  labels:
    app: stack-hub-index
spec:
  type: ClusterIP
  selector:
    app: stack-hub-index
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: stack-hub-index
spec:
  to:
    kind: Service
    name: stack-hub-index
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stack-hub-index
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: stack-hub-index
subjects:
- kind: ServiceAccount
  name: stack-hub-index
roleRef:
  kind: Role
  name: stack-hub-index
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: stack-hub-index
rules:
- apiGroups:
  - ""
  - route.openshift.io
  attributeRestrictions: null
  resources:
  - routes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  - route.openshift.io
  attributeRestrictions: null
  resources:
  - routes/status
  verbs:
  - get
  - list
  - watch
